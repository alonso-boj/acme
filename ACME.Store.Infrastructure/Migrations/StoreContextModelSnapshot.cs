// <auto-generated />
using System;
using ACME.Store.Infrastructure.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ACME.Store.Infrastructure.Migrations
{
    [DbContext(typeof(StoreContext))]
    partial class StoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ACME.Store.Domain.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("city")
                        .HasColumnOrder(6);

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("complement")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("created-at")
                        .HasColumnOrder(9);

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("customer-id")
                        .HasColumnOrder(11);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("last-updated-at")
                        .HasColumnOrder(10);

                    b.Property<bool>("Main")
                        .HasColumnType("bit")
                        .HasColumnName("main")
                        .HasColumnOrder(1);

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("neighborhood")
                        .HasColumnOrder(5);

                    b.Property<int>("Number")
                        .HasMaxLength(10000)
                        .HasColumnType("int")
                        .HasColumnName("number")
                        .HasColumnOrder(3);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("state")
                        .HasColumnOrder(7);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("street")
                        .HasColumnOrder(2);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("zip-code")
                        .HasColumnOrder(8);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("ACME.Store.Domain.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("created-at")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("last-updated-at")
                        .HasColumnOrder(5);

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("mail")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name")
                        .HasColumnOrder(1);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("phone")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("ACME.Store.Domain.Entities.Address", b =>
                {
                    b.HasOne("ACME.Store.Domain.Entities.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ACME.Store.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
